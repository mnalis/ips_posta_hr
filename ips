#!/usr/bin/perl -wT
# Matija Nalis <mnalis-perl@voyager.hr> started 2010-11-18, GPLv3+
# prints any changes to packages status on ips.posta.hr

use strict;

my $DEBUG=$ENV{'DEBUG'} || 0;
my $HOME=$ENV{'HOME'} or die "HOME directory not defined";
if ($HOME =~ m{^(/home/\w+(\w+|\w\.\w|\w/)+)$}) { $HOME = $1 } else { die "invalid chars in homedir $HOME"; }
my $SPOOL_DIR=$HOME . '/.ips_posta_hr';
my $AGENT_ID='check_ips/0.32 ';

$ENV{'PATH'}='/usr/local/bin:/usr/bin:/bin';


#
# no user serviceable parts below
#

use HTML::TableExtract;
use LWP::UserAgent;
use Data::Dumper qw(Dumper);

my $doit = 0;
my $changes = 0;

my $ua = LWP::UserAgent->new;
$ua->agent($AGENT_ID);

# parses HTML file on disk
sub get_metadata($)
{
         my ($trackid) = @_;
         
         my %meta = ();
         my $descfile = "${SPOOL_DIR}/${trackid}.desc";
         if (open DESC, '<', $descfile) {
              while (<DESC>) {
                   chomp;
                   my ($key, $value) = split /\s*=\s*/, $_, 2;
                   $meta{$key}=$value;
                   print "  reading metadata meta{$key}=$value\n" if $DEBUG > 2;
              }
              close DESC;
         } else {
              print "(no previous metadata exists)\n" if $DEBUG > 1;
         }
         return \%meta;
}

# returns formated description, sender etc.
sub get_pretty_metadata($)
{
        my ($trackid) = @_;
        my $meta = get_metadata($trackid);
        my $pretty = "$trackid";
        
        # simplify email to just important domain name
        $$meta{'sender'} =~ s/^.*\@(.+?)\.(com|net|org|cn)$/$1/ if $$meta{'sender'};
        
        $pretty .= " <$$meta{'sender'}>" if $$meta{'sender'};
        $pretty .= " [$$meta{'desc'}]" if $$meta{'desc'};
        
        #$pretty .= "\t";
        $pretty = sprintf ("%-60s", $pretty);	# NB: hardcoded formating column, change depending on your display device, or use "\t" above

        return $pretty;
}

# parses HTML file on disk
sub parse_raw_html($)
{
         my ($TRACKID) = @_;
         
         my $rawfile = "${SPOOL_DIR}/$TRACKID.raw";
         my $parsedfile = "${SPOOL_DIR}/$TRACKID.txt";
         my $newfile = "${parsedfile}.new";
         my $te = HTML::TableExtract->new( headers => [ 'Local Date and Time', 'Country', 'Location', 'Event Type', 'Extra Information' ] );	# match table with this specific headers
         $te->parse_file($rawfile);
         my $table = $te->first_table_found or return "Can't parse table for package# $TRACKID";

         $DEBUG && print "Table  found at ", join(',', $table->coords), ":\n";
         unlink $newfile;
         open TXT, '>', $newfile or die "can't create $newfile: $!";
         my $parsed_ok=0;
         foreach my $row ($table->rows) {
                no warnings;
                my $line = join(',', @$row);
                use warnings;
                $DEBUG && print "    x $line\n";
                print TXT "$line\n" or die "can't write to $newfile: $!";
                $parsed_ok++ if $line =~ m{^\d+[/\.]\d+[/\.]\d+\.? \d+:\d+:\d+};
         }
         close (TXT) or die "can't write-close $newfile: $!";
         print "WARNING: parser looks invalid for $newfile (parsed_ok=$parsed_ok)\n" unless $parsed_ok;

         my $diff = undef;
         if (-r $parsedfile) {
                $DEBUG && print "Found $parsedfile, diff to $newfile\n";
                $diff = `diff $parsedfile $newfile | egrep '^[<>]'`;
         } else {
                $DEBUG && print "No $parsedfile, diff /dev/null to $newfile\n";
                $diff = `diff /dev/null $newfile | egrep '^[<>]'`;
         }
         if ($diff) {
                print "\n*** Changes found for tracked package# " . get_pretty_metadata($TRACKID) . "\n";
                $changes++;
                print "$diff";
                if ($doit) {
                      $DEBUG && print "DOIT=1, doing it for real\n";
                      rename $newfile, $parsedfile or die "can't rename $newfile to $parsedfile: $!";
                } else {
                      print "  (not commiting changes, call with 'DOIT' parameter to really do it)\n";
                }
         }
         return undef;
}

# gets raw HTML for package, and calls parse_raw_html() to parse it
sub request_package_status($)
{
         my ($TRACKID) = @_;
         
         $DEBUG && print "\nRequesting package with tracking# $TRACKID\n";
         my $rawfile = "${SPOOL_DIR}/$TRACKID.raw";
         my $tmpfile = "${rawfile}.tmp";
         open RAW, '>', $tmpfile or die "can't write to $tmpfile: $!";
         
         # Create a request
         my $req = HTTP::Request->new(GET => "http://ips.posta.hr/IPSWeb_item_events.asp?itemid=$TRACKID");

         # Pass request to the user agent and get a response back
         my $res = $ua->request($req);

         # Check the outcome of the response
         if ($res->is_success) {
             print "CONTENT: " . $res->content if $DEBUG > 2;
             print RAW $res->content;
             close RAW;
             rename $tmpfile, $rawfile or die "can't rename $tmpfile to $rawfile: $!";
             my $htmlres = parse_raw_html($TRACKID);
             print "*** ERROR: $htmlres\n" if $htmlres and $DEBUG;
         }
         else {
             print "HTTP REQUEST FOR TRACKING# $TRACKID failed with ", $res->status_line, "\n";
         }
}

# outputs oneline last status of package
sub print_last_status($)
{
         my ($TRACKID) = @_;
         my $output = '';
         my $delivered = 0;
         
         my $parsedfile = "${SPOOL_DIR}/${TRACKID}.txt";
         open PARSED, '<', $parsedfile or die "can't open parsed file $parsedfile: $!";
         while (<PARSED>) {
               chomp;
               if (/Zagreb.*,\s*Deliver\s+item/i) { $delivered=1 }	# NB FIXME: hardcoded Zagreb
               $output = $_ if $_;
          }
         close PARSED;
         
         print ' ' . ($delivered?'+ ':'- ') . get_pretty_metadata($TRACKID) . ' ' . ($output?$output:'(nothing yet)') . "\n";
}

# add new order to tracker (with optional metadata)
sub track_new_order ($$$)
{
         my ($trackid, $desc, $sender) = @_;
         print "Adding $trackid to the tracking database";
         print " (with desc=$desc)" if $desc;
         print " (with sender=$sender)" if $sender;
         print ".\n";
         my $touchfile = "${SPOOL_DIR}/${trackid}.txt";
         if (-f $touchfile) {
               print "  $touchfile already exists.\n";
         } else {
               system 'touch', $touchfile;
         }
         
         if ($desc or $sender) {		# is there extra metadata to update?
               # read in previous metadata (if exists)
               my $meta = get_metadata($trackid); my %meta=%$meta;
               
               # add/update description
               $meta{'desc'} = $desc if $desc;
               # add/update sender
               $meta{'sender'} = $sender if $sender;
               
               # some extra metadata 
               $meta{'lastupdate'} = localtime() . " by $AGENT_ID";
               
               # write back metadata
               my $descfile = "${SPOOL_DIR}/${trackid}.desc";
               my $tmpfile = $descfile . '.tmp';
               open DESC, '>',  $tmpfile or die "can't write to $tmpfile: $!";
               foreach my $key (keys %meta) {
                    print DESC "$key=$meta{$key}\n" or die "can't append to $tmpfile: $!";
               }
               close DESC or die "can't close $tmpfile: $!";
               rename $tmpfile, $descfile or die "can't rename $tmpfile to $descfile: $!";
         }
}

##########################################
###             MAIN loop              ###
##########################################


 
my $arg = $ARGV[0];
if (defined($arg)) {
         if (! -d "$SPOOL_DIR") {
             print "Warning: $SPOOL_DIR does not exists, creating...\n";
             mkdir $SPOOL_DIR, 0700 or die "can't create $SPOOL_DIR: $!";
         }

         if ($arg eq 'DOIT') { 
                $doit=1;
         } elsif ($arg =~ /^([A-Z]{2}\d{9}[A-Z]{2})$/) {
                track_new_order ($1, $ARGV[1], $ARGV[2]);
                exit 0;
         } else {
                die "invalid argument $arg. Usage: $0 [DOIT | EA123456789HR [optional_description] [optional_sender] ]";
         }
} 

# find all tracked files
opendir DIR, $SPOOL_DIR or die "can't opendir $SPOOL_DIR: $!";
my @files = grep { -f "$SPOOL_DIR/$_" } readdir(DIR);
closedir DIR;

foreach my $t (@files) {
    if ($t =~ /^([A-Z0-9]{13})\.txt$/) {
          request_package_status($1);
    }
}

# if we outputed anything (if there were any changes), show last status of all packages
if (!$doit or $changes) {
  print "\nThere have been changes to $changes packages. Last state of each package is:\n";
  foreach my $t (sort @files) {
      if ($t =~ /^([A-Z0-9]{13})\.txt$/) {
            print_last_status($1);
      }
  }
}

exit 0;
